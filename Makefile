.PHONY: help dev build start stop restart logs clean test deploy backup

# Variables
COMPOSE=docker-compose
COMPOSE_DEV=$(COMPOSE) -f docker-compose.yml

# Couleurs pour les messages
GREEN=\033[0;32m
YELLOW=\033[1;33m
RED=\033[0;31m
NC=\033[0m # No Color

help: ## Affiche cette aide
	@echo "$(GREEN)BYTHEWISE SaaS - Commandes disponibles$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(YELLOW)%-15s$(NC) %s\n", $$1, $$2}'

# D√©veloppement
dev: ## Lance l'environnement de d√©veloppement
	@echo "$(GREEN)üöÄ D√©marrage de l'environnement de d√©veloppement...$(NC)"
	@cp -n .env.example .env 2>/dev/null || true
	$(COMPOSE_DEV) up -d
	@echo "$(GREEN)‚úì Environnement d√©marr√© !$(NC)"
	@echo "$(YELLOW)Dashboard: http://localhost:3000$(NC)"
	@echo "$(YELLOW)API: http://localhost:3001$(NC)"
	@echo "$(YELLOW)PostgreSQL: localhost:5432$(NC)"
	@echo "$(YELLOW)Redis: localhost:6379$(NC)"

build: ## Build les images Docker
	@echo "$(GREEN)üî® Construction des images Docker...$(NC)"
	$(COMPOSE_DEV) build --no-cache

start: ## D√©marre les services
	@echo "$(GREEN)‚ñ∂Ô∏è  D√©marrage des services...$(NC)"
	$(COMPOSE_DEV) up -d

stop: ## Arr√™te les services
	@echo "$(YELLOW)‚è∏Ô∏è  Arr√™t des services...$(NC)"
	$(COMPOSE_DEV) stop

restart: ## Red√©marre les services
	@echo "$(YELLOW)üîÑ Red√©marrage des services...$(NC)"
	$(COMPOSE_DEV) restart

# Logs
logs: ## Affiche les logs de tous les services
	$(COMPOSE_DEV) logs -f

logs-api: ## Affiche les logs de l'API
	$(COMPOSE_DEV) logs -f api

logs-dashboard: ## Affiche les logs du dashboard
	$(COMPOSE_DEV) logs -f dashboard

logs-postgres: ## Affiche les logs de PostgreSQL
	$(COMPOSE_DEV) logs -f postgres

logs-redis: ## Affiche les logs de Redis
	$(COMPOSE_DEV) logs -f redis

# Base de donn√©es
db-migrate: ## Ex√©cute les migrations de base de donn√©es
	@echo "$(GREEN)üìä Ex√©cution des migrations...$(NC)"
	$(COMPOSE_DEV) exec api npm run migrate

db-shell: ## Ouvre un shell PostgreSQL
	@echo "$(GREEN)üóÑÔ∏è  Connexion √† PostgreSQL...$(NC)"
	$(COMPOSE_DEV) exec postgres psql -U admin -d bythewise_central

db-backup: ## Sauvegarde la base de donn√©es
	@echo "$(GREEN)üíæ Sauvegarde de la base de donn√©es...$(NC)"
	@mkdir -p backups
	$(COMPOSE_DEV) exec -T postgres pg_dump -U admin bythewise_central > backups/backup-$$(date +%Y%m%d-%H%M%S).sql
	@echo "$(GREEN)‚úì Sauvegarde termin√©e dans backups/$(NC)"

db-restore: ## Restaure la derni√®re sauvegarde (usage: make db-restore FILE=backup.sql)
	@echo "$(GREEN)üì• Restauration de la base de donn√©es...$(NC)"
	@if [ -z "$(FILE)" ]; then \
		echo "$(RED)Erreur: Sp√©cifiez le fichier avec FILE=backup.sql$(NC)"; \
		exit 1; \
	fi
	$(COMPOSE_DEV) exec -T postgres psql -U admin bythewise_central < $(FILE)

# Tests
test: ## Ex√©cute les tests
	@echo "$(GREEN)üß™ Ex√©cution des tests...$(NC)"
	$(COMPOSE_DEV) exec api npm test
	@echo "$(GREEN)‚úì Tests termin√©s$(NC)"

test-api: ## Teste l'API
	@echo "$(GREEN)Testing API endpoints...$(NC)"
	@curl -f http://localhost:3001/health || echo "$(RED)API health check failed$(NC)"
	@curl -f http://localhost:3001/ || echo "$(RED)API root endpoint failed$(NC)"

# Nettoyage
clean: ## Nettoie les conteneurs et volumes
	@echo "$(RED)üßπ Nettoyage des conteneurs et volumes...$(NC)"
	$(COMPOSE_DEV) down -v
	@echo "$(GREEN)‚úì Nettoyage termin√©$(NC)"

clean-all: ## Nettoie tout (conteneurs, volumes, images)
	@echo "$(RED)üóëÔ∏è  Nettoyage complet...$(NC)"
	$(COMPOSE_DEV) down -v --rmi all
	@echo "$(GREEN)‚úì Nettoyage complet termin√©$(NC)"

# Installation
install: ## Installe les d√©pendances
	@echo "$(GREEN)üì¶ Installation des d√©pendances...$(NC)"
	@cd api && npm install
	@cd dashboard && npm install
	@echo "$(GREEN)‚úì D√©pendances install√©es$(NC)"

setup: install ## Setup initial du projet
	@echo "$(GREEN)‚öôÔ∏è  Configuration initiale...$(NC)"
	@cp -n .env.example .env 2>/dev/null || true
	@cp -n api/.env.example api/.env 2>/dev/null || true
	@cp -n dashboard/.env.example dashboard/.env 2>/dev/null || true
	@echo "$(GREEN)‚úì Configuration termin√©e$(NC)"
	@echo "$(YELLOW)N'oubliez pas d'√©diter les fichiers .env avec vos valeurs$(NC)"

# D√©ploiement
deploy: ## D√©ploie en production
	@echo "$(GREEN)üöÄ D√©ploiement en production...$(NC)"
	@if [ "$(ENV)" != "production" ]; then \
		echo "$(RED)Erreur: D√©finissez ENV=production pour d√©ployer$(NC)"; \
		exit 1; \
	fi
	git pull origin main
	$(COMPOSE) -f docker-compose.yml build
	$(COMPOSE) -f docker-compose.yml up -d
	@echo "$(GREEN)‚úì D√©ploiement termin√©$(NC)"

# Monitoring
status: ## Affiche le statut des services
	@echo "$(GREEN)üìä Statut des services:$(NC)"
	$(COMPOSE_DEV) ps

stats: ## Affiche les statistiques des conteneurs
	@echo "$(GREEN)üìà Statistiques des conteneurs:$(NC)"
	docker stats --no-stream

health: ## V√©rifie la sant√© des services
	@echo "$(GREEN)üè• V√©rification de la sant√© des services:$(NC)"
	@curl -s http://localhost:3001/health | jq '.' || echo "$(RED)API non disponible$(NC)"

# Par d√©faut
.DEFAULT_GOAL := help
